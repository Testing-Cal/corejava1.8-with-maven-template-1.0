# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven


name: Java CI with Maven

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'
  workflow_dispatch:
   inputs:
    github_general:
      default: 'PLACE_HOLDER'
      type: string
      required: true
      
      

jobs:
  Continuous_Integraiton:
    runs-on: [self-hosted]
     # project_name or repo_name
     # repository_url
     # repostiry_type(AWS,JFROG,ACR)
     # sonar_host
     # sonar_url
     # artifactory_username_secret
     #artifactory_password_secret
    env:
     GITHUB_GENERAL: 'PLACE_HOLDER'
     
     
    steps:
    # Printing Input Variables for Debugging.
    - name: Print input variables
      if:  github.event_name == 'workflow_dispatch'    
      run: |
         echo 'GITHUB_GENERAL=${{ github.event.inputs.github_general }}' >> $GITHUB_ENV
     
    # creating json file
    - name: create-json for metadata
      id: create-json
      uses: jsdaniell/create-json@1.1.2
      with:
        name: "github_general.json"
        json: ${{ env.GITHUB_GENERAL }}

    - name: use output
      run: |
        echo "repo_name=$(cat github_general.json | jq -r '.repoName')" >> $GITHUB_ENV
        echo "artifactory_type=$(cat github_general.json | jq -r '.artifactory')" >> $GITHUB_ENV
        echo "artifactory_username=$(cat github_general.json | jq -r '.artifactoryUsernameCredentialId')" >> $GITHUB_ENV
        echo "artifactory_password=$(cat github_general.json | jq -r '.artifactoryPasswordCredentialId')" >> $GITHUB_ENV
        echo "sonar_host=$(cat github_general.json | jq -r '.sonarHost')" >> $GITHUB_ENV
        echo "sonar_token=$(cat github_general.json | jq -r '.sonarTokenCredentialId')" >> $GITHUB_ENV
        echo "repository_url=$(cat github_general.json | jq -r '.repositoryUrl')" >> $GITHUB_ENV
        echo ${{ env.repo_name }}
        
    - name: use jemson
      run: |
        echo ${{ env.repo_name }}
        echo ${{ env.artifactory_type }}
        echo ${{ env.artifactory_username }}
        echo ${{ env.artifactory_password }}
        echo ${{ env.sonar_host }}
        echo ${{ env.sonar_token }}
        echo ${{ env.repository_url }}
    
    - name: Checkout Code
      uses: actions/checkout@v2
      
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.3
      with:
        maven-version: 3.8.2
  
  # Since with is a map and cannot interpret shell so we need to export it and use it as env variable.
    - name: exporting Workflow number
      run: echo "RUN_NUMBER=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

# Since we cannot use secrets in if conditions
    - name: Assign variable Repository type
      id: registry_type
      run: echo '::set-output name=secret::${{ env.artifactory_type }}'
      env:
        REPOSITORY_TYPE: ${{ env.artifactory_type }}
      
  # Since we need docker image name in lower case, using this funciton.
    - id: project_name
      uses: ASzc/change-string-case-action@v2
      with:
        string: ${{ env.repo_name }} 
        
    - run: |
         echo ${{ env.repo_name }}
      
    - name: Maven Build and Install
      run: mvn clean install -Dmaven.test.skip=true
      
    - name: Maven Test
      run: mvn test --batch-mode
      
    - name: SonarQube Scan
      run: mvn --batch-mode -V -U -e org.sonarsource.scanner.maven:sonar-maven-plugin:3.5.0.1254:sonar -Dsonar.java.binaries='.' -Dsonar.exclusions='pom.xml, target/**/*' -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.projectName=$SONAR_PROJECT_KEY -Dsonar.host.url=${{ env.sonar_host }} -Dsonar.login=${{ secrets[env.sonar_token] }}
      env:
       SONAR_TOKEN1: ${{ env.sonar_token }}
       SONAR_HOST_URL: ${{ env.sonar_host }}
       SONAR_PROJECT_KEY: ${{ env.repo_name }}

 ## Docker Related tasks.
# This will work for Azure Container Registry and Jfrog as the authentication mechanism is same.
# actions support provided by Docker.
# URL : https://github.com/marketplace/actions/build-and-push-docker-images

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - if: steps.registry_type.outputs.secret != 'AWS'
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: ${{ env.repository_url }}
        username: ${{ secrets[env.artifactory_username] }}
        password: ${{ secrets[env.artifactory_password] }}


    - if: steps.registry_type.outputs.secret != 'AWS'
      name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.repository_url }}/${{ steps.project_name.outputs.lowercase }}:${{ env.RUN_NUMBER }}


# Docker aws login and publish on ECR.
    - name: Configure AWS credentials
      if: steps.registry_type.outputs.secret == 'AWS'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets[env.artifactory_username] }}
        aws-secret-access-key: ${{ secrets[env.artifactory_password] }}
        aws-region: us-east-1


    - name: Login to Amazon ECR
      id: login-ecr
      if: steps.registry_type.outputs.secret == 'AWS'
      uses: aws-actions/amazon-ecr-login@v1
      #run: docker login -u AWS -p $(aws ecr get-login-password --region us-east-1) https://${{ env.artifactory_url }}

    - name: Build, tag, and push image to Amazon ECR
      if: steps.registry_type.outputs.secret == 'AWS'
      env:
        ECR_REPOSITORY: ${{ steps.project_name.outputs.lowercase }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.RUN_NUMBER }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
